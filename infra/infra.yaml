apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: bitnami/redis
          ports:
            - containerPort: 6379
          env:
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  labels:
    name: redis
spec:
  ports:
    - port: 6379
      name: redis-port
      protocol: TCP
  selector:
    app: redis
  type: ClusterIP
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: nginx-ingress
#spec:
#  ingressClassName: nginx
#  rules:
#    - http:
#        paths:
#          - path: /identity
#            pathType: Prefix
#            backend:
#              service:
#                name: identity-service
#                port:
#                  number: 80
#          - path: /order
#            pathType: Prefix
#            backend:
#              service:
#                name: order-service
#                port:
#                  number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: wurstmeister/zookeeper:3.4.6
          ports:
            - containerPort: 2181
          env:
            #            - name: ZOOKEEPER_ID
            #              value: "1"
            #            - name: ZOOKEEPER_SERVER_1
            #              value: zookeeper
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  labels:
    name: zookeeper
spec:
  ports:
    - port: 2181
      name: zookeeper-port
      protocol: TCP
  selector:
    app: zookeeper
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
        id: "1"
    spec:
      containers:
        - name: kafka
          image: wurstmeister/kafka:2.13-2.8.1
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_ADVERTISED_PORT
              value: "9092"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "kafka-service"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper-service:2181
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
#            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
#              value: PLAINTEXT
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  labels:
    name: kafka
spec:
  ports:
    - port: 9092
      name: kafka-port
      protocol: TCP
  selector:
    app: kafka
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pg-identity
  labels:
    app: pg-identity
spec:
  selector:
    matchLabels:
      app: pg-identity
  template:
    metadata:
      labels:
        app: pg-identity
    spec:
      containers:
        - name: pg-identity
          image: bitnami/postgresql:14.3.0
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: identity
            - name: POSTGRES_USER
              value: admin
            - name: POSTGRES_PASSWORD
              value: pass
#          volumeMounts:
#            - mountPath: "/var/lib/postgresql/data"
#              name: "identity-pgdata"
#      volumes:
#        - hostPath:
#            path: "/home/docker/pgdata"
#          name: identity-pgdata
---
apiVersion: v1
kind: Service
metadata:
  name: pg-identity-service
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    service: pg-identity
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pg-order
  labels:
    app: pg-order
spec:
  selector:
    matchLabels:
      app: pg-order
  template:
    metadata:
      labels:
        app: pg-order
    spec:
      containers:
        - name: pg-order
          image: bitnami/postgresql:14.3.0
          ports:
            - containerPort: 5433
          env:
            - name: POSTGRES_DB
              value: order
            - name: POSTGRES_USER
              value: admin
            - name: POSTGRES_PASSWORD
              value: pass
#          volumeMounts:
#            - mountPath: "/var/lib/postgresql/data"
#              name: "order-pgdata"
#      volumes:
#        - hostPath:
#            path: "/home/docker/pgdata"
#          name: order-pgdata
---
apiVersion: v1
kind: Service
metadata:
  name: pg-order-service
spec:
  type: ClusterIP
  ports:
    - port: 5433
  selector:
    service: pg-order
---
