
volumes:
  postgres-order:
  postgres-admin:
  postgres-courier:
  postgres-user:
  postgres-auth:

networks:
  parcel-delivery:
    name: parcel-delivery-network

services:
  redis:
    image: bitnami/redis
    restart: unless-stopped
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    networks:
      parcel-delivery:

  nginx:
    image: nginx
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - .\nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      parcel-delivery:

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:3.4.6
    restart: unless-stopped
    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "22181:2181"
    networks:
      parcel-delivery:

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:2.13-2.8.1
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    networks:
      parcel-delivery:

  postgres-identity:
    container_name: postgres-identity
    image: bitnami/postgresql:14.3.0
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=admin
      - POSTGRES_DB=identity
      - TZ=GMT+2
      - PGTZ=GMT+2
    ports:
      - "5432:5432"
    volumes:
      - postgres-admin:/data/postgres
    networks:
      parcel-delivery:

  postgres-order:
    container_name: postgres-order
    image: bitnami/postgresql:14.3.0
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=admin
      - POSTGRES_DB=order
      - TZ=GMT+2
      - PGTZ=GMT+2
    ports:
      - "5434:5432"
    volumes:
      - postgres-order:/data/postgres
    networks:
      parcel-delivery:

  identity-service:
    container_name: identity-service
    depends_on:
      - kafka
      - postgres-identity
    build:
      context: ..\identityservice
      dockerfile: Dockerfile
    networks:
      parcel-delivery:
    environment:
      - "SPRING_PROFILES_ACTIVE=prod"

  order-service:
    container_name: order-service
    depends_on:
      - kafka
      - postgres-order
    build:
      context: ..\orderservice
      dockerfile: Dockerfile
    networks:
      parcel-delivery:
    entrypoint:
      - "SPRING_PROFILES_ACTIVE=prod"

  postgres-keycloak:
    container_name: postgres-keycloak
    image: bitnami/postgresql:14.3.0
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: keycloak
    ports:
      - "5435:5432"
    volumes:
      - postgres-auth:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    restart: unless-stopped

  keycloak:
    image: jboss/keycloak:16.1.1
    container_name: keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
#      DB_SCHEMA: keycloak
      DB_USER: postgres
      DB_PASSWORD: postgres
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - "8484:8080"
    depends_on:
      - postgres-keycloak
